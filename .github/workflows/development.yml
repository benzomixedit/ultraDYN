name: Development Pipeline

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Target platform'
        required: true
        default: 'macos-latest'
        type: choice
        options:
          - macos-latest
          - windows-latest
      config:
        description: 'Build configuration'
        required: true
        default: 'Release'
        type: choice
        options:
          - Debug
          - Release
      create_release:
        description: 'Create development release'
        required: false
        default: false
        type: boolean

env:
  JUCE_VERSION: '8.0.8'
  PLUGINVAL_VERSION: '1.0.0'

jobs:
  development-build:
    runs-on: ${{ github.event.inputs.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JUCE
        run: |
          # Download and setup JUCE framework
          JUCE_DIR="$HOME/juce"
          mkdir -p "$JUCE_DIR"
          cd "$JUCE_DIR"
          
          # Clone JUCE repository
          git clone --depth 1 --branch ${{ env.JUCE_VERSION }} https://github.com/juce-framework/JUCE.git .
          
          # Set JUCE path for the build
          echo "JUCE_DIR=$JUCE_DIR" >> $GITHUB_ENV

      - name: Cache JUCE
        uses: actions/cache@v4
        with:
          path: |
            $HOME/juce
            ${{ github.workspace }}/JuceLibraryCode
          key: juce-${{ env.JUCE_VERSION }}-${{ runner.os }}

      - name: Setup build environment
        if: runner.os == 'macOS'
        run: |
          # Create self-signed certificate for code signing
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Create certificate
          openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=UltraDYN Development"
          openssl pkcs12 -export -out certificate.p12 -inkey key.pem -in cert.pem -passout pass:""
          
          # Import certificate
          security import certificate.p12 -k build.keychain -P "" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

      - name: Build project
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            # macOS build
            xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -scheme ultraDYN -configuration ${{ github.event.inputs.config }} -derivedDataPath build
          elif [ "${{ runner.os }}" = "Windows" ]; then
            # Windows build
            msbuild Builds/VisualStudio2022/ultraDYN.sln /p:Configuration=${{ github.event.inputs.config }} /p:Platform=x64
          else
            # Linux build
            make -C Builds/LinuxMakefile CONFIG=${{ github.event.inputs.config }}
          fi

      - name: Setup pluginval
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            curl -L -o pluginval.zip "https://github.com/Tracktion/pluginval/releases/download/v${{ env.PLUGINVAL_VERSION }}/pluginval_macOS.zip"
            unzip pluginval.zip
            chmod +x pluginval
          elif [ "${{ runner.os }}" = "Windows" ]; then
            curl -L -o pluginval.zip "https://github.com/Tracktion/pluginval/releases/download/v${{ env.PLUGINVAL_VERSION }}/pluginval_Windows.zip"
            unzip pluginval.zip
          else
            curl -L -o pluginval.zip "https://github.com/Tracktion/pluginval/releases/download/v${{ env.PLUGINVAL_VERSION }}/pluginval_Linux.zip"
            unzip pluginval.zip
            chmod +x pluginval
          fi

      - name: Validate plugins
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            ./pluginval --validate-in-process --timeout-ms 60000 build/Build/Products/${{ github.event.inputs.config }}/ultraDYN.vst3
            ./pluginval --validate-in-process --timeout-ms 60000 build/Build/Products/${{ github.event.inputs.config }}/ultraDYN.component
          elif [ "${{ runner.os }}" = "Windows" ]; then
            ./pluginval.exe --validate-in-process --timeout-ms 60000 Builds/VisualStudio2022/x64/${{ github.event.inputs.config }}/VST3/ultraDYN.vst3
          else
            ./pluginval --validate-in-process --timeout-ms 60000 Builds/LinuxMakefile/build/ultraDYN.so
          fi

      - name: Create DMG (macOS only)
        if: runner.os == 'macOS' && github.event.inputs.create_release == 'true'
        run: |
          # Create DMG installer
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          create-dmg \
            --volname "UltraDYN $VERSION" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "ultraDYN.app" 200 190 \
            --hide-extension "ultraDYN.app" \
            --app-drop-link 600 185 \
            "ultraDYN-$VERSION-macOS.dmg" \
            "build/Build/Products/${{ github.event.inputs.config }}/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ultraDYN-${{ runner.os }}-${{ github.event.inputs.config }}-dev-${{ github.run_id }}
          path: |
            build/Build/Products/${{ github.event.inputs.config }}/*.vst3
            build/Build/Products/${{ github.event.inputs.config }}/*.component
            build/Build/Products/${{ github.event.inputs.config }}/*.app
            Builds/VisualStudio2022/x64/${{ github.event.inputs.config }}/VST3/*.vst3
            Builds/VisualStudio2022/x64/${{ github.event.inputs.config }}/Standalone/*.exe
            Builds/LinuxMakefile/build/*.so
            Builds/LinuxMakefile/build/ultraDYN
            ultraDYN-*-macOS.dmg
          retention-days: 7

  create-development-release:
    needs: development-build
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Development Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: dev-${{ github.run_id }}
          name: "UltraDYN Development Build ${{ github.run_id }}"
          body: |
            Development build for testing purposes.
            
            **Platform**: ${{ github.event.inputs.platform }}
            **Configuration**: ${{ github.event.inputs.config }}
            **Build ID**: ${{ github.run_id }}
            
            This is an automated development build. Use for testing only.
          files: |
            artifacts/**/*.vst3
            artifacts/**/*.component
            artifacts/**/*.app
            artifacts/**/*.exe
            artifacts/**/*.so
            artifacts/**/*.dmg
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
