name: Development Pipeline

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Target platform'
        required: true
        default: 'macos-latest'
        type: choice
        options:
          - macos-latest
          - windows-latest
      config:
        description: 'Build configuration'
        required: true
        default: 'Release'
        type: choice
        options:
          - Debug
          - Release
      create_release:
        description: 'Create development release'
        required: false
        default: false
        type: boolean

env:
  JUCE_VERSION: '8.0.8'

jobs:
  development-build:
    runs-on: ${{ github.event.inputs.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JUCE
        shell: bash
        run: |
          # Download and setup JUCE framework
          JUCE_DIR="$HOME/juce"
          mkdir -p "$JUCE_DIR"
          cd "$JUCE_DIR"
          
          # Clone JUCE repository
          git clone --depth 1 --branch ${{ env.JUCE_VERSION }} https://github.com/juce-framework/JUCE.git .
          
          # Set JUCE path for the build
          echo "JUCE_DIR=$JUCE_DIR" >> $GITHUB_ENV
          
          # Verify JUCE setup
          echo "JUCE directory contents:"
          ls -la
          echo "JUCE modules directory contents:"
          ls -la modules/ || echo "modules directory not found"

      - name: Cache JUCE
        uses: actions/cache@v4
        with:
          path: |
            $HOME/juce
          key: juce-${{ env.JUCE_VERSION }}-${{ runner.os }}

      - name: Setup Visual Studio (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1

      - name: Update JUCE paths in .jucer file
        shell: bash
        run: |
          # Update the .jucer file to use the correct JUCE path for CI
          JUCE_DIR="$HOME/juce"
          
          if [ "${{ runner.os }}" = "macOS" ]; then
            # For macOS, use relative path from project root
            sed -i.bak 's|path="../../../JUCE/modules"|path="../../juce/modules"|g' ultraDYN.jucer
          elif [ "${{ runner.os }}" = "Windows" ]; then
            # For Windows, use absolute path
            sed -i.bak 's|path="../../../JUCE/modules"|path="C:/Users/runneradmin/juce/modules"|g' ultraDYN.jucer
          fi
          
          echo "Updated .jucer file with JUCE path:"
          grep -A 2 -B 2 "path=" ultraDYN.jucer

      - name: Generate project files (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          # Build Projucer first
          echo "Building Projucer..."
          cd "$HOME/juce/extras/Projucer/Builds/MacOSX"
          xcodebuild -project Projucer.xcodeproj -target "Projucer - App" -configuration Release
          
          # Use Projucer to generate project files
          PROJUCER_BIN="$HOME/juce/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
          if [ -x "$PROJUCER_BIN" ]; then
            echo "Running Projucer to generate project files..."
            "$PROJUCER_BIN" --resave "${{ github.workspace }}/ultraDYN.jucer"
          else
            echo "Projucer binary not found, using existing project files"
          fi

      - name: Generate project files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Build Projucer first
          Write-Host "Building Projucer..."
          $juceDir = "C:\Users\runneradmin\juce"
          $projucerSln = Join-Path $juceDir "extras\Projucer\Builds\VisualStudio2022\Projucer.sln"
          
          # Find MSBuild
          $msbuildPath = $null
          $possiblePaths = @(
            "msbuild",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Get-Command $path -ErrorAction SilentlyContinue) {
              $msbuildPath = $path
              break
            }
          }
          
          if ($msbuildPath) {
            & $msbuildPath $projucerSln "/p:Configuration=Release" "/p:Platform=x64" "/verbosity:minimal"
            
            # Use Projucer to generate project files
            $projucerExe = Join-Path $juceDir "extras\Projucer\Builds\VisualStudio2022\x64\Release\App\Projucer.exe"
            if (Test-Path $projucerExe) {
              Write-Host "Running Projucer to generate project files..."
              & $projucerExe --resave ultraDYN.jucer
            } else {
              Write-Host "Projucer.exe not found, using existing project files"
            }
          } else {
            Write-Host "MSBuild not found, using existing project files"
          }

      - name: Setup build environment (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          # Create self-signed certificate for code signing
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Create certificate
          openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=UltraDYN Development"
          openssl pkcs12 -export -out certificate.p12 -inkey key.pem -in cert.pem -passout pass:password
          
          # Import certificate
          security import certificate.p12 -k build.keychain -P password -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

      - name: Build project (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "Building macOS project..."
          
          # List available targets
          echo "Available targets:"
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -list
          
          # Build VST3 target
          echo "Building VST3..."
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -target "ultraDYN - VST3" -configuration ${{ github.event.inputs.config }} -allowProvisioningUpdates
          
          # Build AU target
          echo "Building AU..."
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -target "ultraDYN - AU" -configuration ${{ github.event.inputs.config }} -allowProvisioningUpdates

      - name: Build project (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Building Windows project..."
          
          # Find MSBuild
          $msbuildPath = $null
          $possiblePaths = @(
            "msbuild",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Get-Command $path -ErrorAction SilentlyContinue) {
              $msbuildPath = $path
              break
            }
          }
          
          if ($msbuildPath) {
            Write-Host "Using MSBuild at: $msbuildPath"
            & $msbuildPath "Builds\VisualStudio2022\ultraDYN.sln" "/p:Configuration=${{ github.event.inputs.config }}" "/p:Platform=x64" "/verbosity:minimal"
          } else {
            Write-Error "MSBuild not found"
            exit 1
          }

      - name: Create development package (macOS)
        if: runner.os == 'macOS' && github.event.inputs.create_release == 'true'
        shell: bash
        run: |
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          echo "Creating macOS development package for version $VERSION"
          
          # Create a simple zip package
          mkdir -p "ultraDYN-$VERSION-macOS"
          
          # Copy VST3 plugin
          if [ -d "build/Build/Products/${{ github.event.inputs.config }}/ultraDYN.vst3" ]; then
            cp -r "build/Build/Products/${{ github.event.inputs.config }}/ultraDYN.vst3" "ultraDYN-$VERSION-macOS/"
          elif [ -d "Builds/MacOSX/build/Build/Products/${{ github.event.inputs.config }}/ultraDYN.vst3" ]; then
            cp -r "Builds/MacOSX/build/Build/Products/${{ github.event.inputs.config }}/ultraDYN.vst3" "ultraDYN-$VERSION-macOS/"
          fi
          
          # Copy AU plugin
          if [ -d "build/Build/Products/${{ github.event.inputs.config }}/ultraDYN.component" ]; then
            cp -r "build/Build/Products/${{ github.event.inputs.config }}/ultraDYN.component" "ultraDYN-$VERSION-macOS/"
          elif [ -d "Builds/MacOSX/build/Build/Products/${{ github.event.inputs.config }}/ultraDYN.component" ]; then
            cp -r "Builds/MacOSX/build/Build/Products/${{ github.event.inputs.config }}/ultraDYN.component" "ultraDYN-$VERSION-macOS/"
          fi
          
          # Create zip file
          zip -r "ultraDYN-$VERSION-macOS.zip" "ultraDYN-$VERSION-macOS/"
          echo "Created macOS development package: ultraDYN-$VERSION-macOS.zip"

      - name: Create development package (Windows)
        if: runner.os == 'Windows' && github.event.inputs.create_release == 'true'
        shell: bash
        run: |
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          echo "Creating Windows development package for version $VERSION"
          
          # Create a simple zip package
          mkdir -p "ultraDYN-$VERSION-Windows"
          
          # Copy VST3 plugin
          if [ -d "Builds/VisualStudio2022/x64/${{ github.event.inputs.config }}/VST3/ultraDYN.vst3" ]; then
            cp -r "Builds/VisualStudio2022/x64/${{ github.event.inputs.config }}/VST3/ultraDYN.vst3" "ultraDYN-$VERSION-Windows/"
          fi
          
          # Copy standalone app
          if [ -f "Builds/VisualStudio2022/x64/${{ github.event.inputs.config }}/Standalone/ultraDYN.exe" ]; then
            cp "Builds/VisualStudio2022/x64/${{ github.event.inputs.config }}/Standalone/ultraDYN.exe" "ultraDYN-$VERSION-Windows/"
          fi
          
          # Create zip file
          zip -r "ultraDYN-$VERSION-Windows.zip" "ultraDYN-$VERSION-Windows/"
          echo "Created Windows development package: ultraDYN-$VERSION-Windows.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ultraDYN-${{ runner.os }}-${{ github.event.inputs.config }}-dev-${{ github.run_id }}
          path: |
            build/Build/Products/${{ github.event.inputs.config }}/*.vst3
            build/Build/Products/${{ github.event.inputs.config }}/*.component
            build/Build/Products/${{ github.event.inputs.config }}/*.app
            Builds/MacOSX/build/Build/Products/${{ github.event.inputs.config }}/*.vst3
            Builds/MacOSX/build/Build/Products/${{ github.event.inputs.config }}/*.component
            Builds/MacOSX/build/Build/Products/${{ github.event.inputs.config }}/*.app
            Builds/VisualStudio2022/x64/${{ github.event.inputs.config }}/VST3/*.vst3
            Builds/VisualStudio2022/x64/${{ github.event.inputs.config }}/Standalone/*.exe
            ultraDYN-*-macOS.zip
            ultraDYN-*-Windows.zip
          retention-days: 7

  create-development-release:
    needs: development-build
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Development Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: dev-${{ github.run_id }}
          name: "UltraDYN Development Build ${{ github.run_id }}"
          body: |
            Development build for testing purposes.
            
            **Platform**: ${{ github.event.inputs.platform }}
            **Configuration**: ${{ github.event.inputs.config }}
            **Build ID**: ${{ github.run_id }}
            
            This is an automated development build. Use for testing only.
          files: |
            artifacts/**/*.vst3
            artifacts/**/*.component
            artifacts/**/*.app
            artifacts/**/*.exe
            artifacts/**/*.zip
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
