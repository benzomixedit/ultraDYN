name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  JUCE_VERSION: '8.0.8'

jobs:
  build-and-test:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]
        config: [Debug, Release]
        include:
          - platform: macos-latest
            os: macOS
            arch: universal
          - platform: windows-latest
            os: Windows
            arch: x64

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JUCE
        shell: bash
        run: |
          # Download and setup JUCE framework
          JUCE_DIR="$HOME/juce"
          mkdir -p "$JUCE_DIR"
          cd "$JUCE_DIR"
          
          # Clone JUCE repository
          git clone --depth 1 --branch ${{ env.JUCE_VERSION }} https://github.com/juce-framework/JUCE.git .
          
          # Set JUCE path for the build
          echo "JUCE_DIR=$JUCE_DIR" >> $GITHUB_ENV
          
          # Verify JUCE setup
          echo "JUCE directory contents:"
          ls -la
          echo "JUCE modules directory contents:"
          ls -la modules/ || echo "modules directory not found"

      - name: Cache JUCE
        uses: actions/cache@v4
        with:
          path: |
            $HOME/juce
          key: juce-${{ env.JUCE_VERSION }}-${{ runner.os }}

      - name: Setup Visual Studio (Windows)
        if: matrix.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1

      - name: Update JUCE paths in .jucer file
        shell: bash
        run: |
          # Update the .jucer file to use the correct JUCE path for CI
          JUCE_DIR="$HOME/juce"
          
          if [ "${{ matrix.os }}" = "macOS" ]; then
            # For macOS, use relative path from project root
            sed -i.bak 's|path="../../../JUCE/modules"|path="../../juce/modules"|g' ultraDYN.jucer
          elif [ "${{ matrix.os }}" = "Windows" ]; then
            # For Windows, use absolute path
            sed -i.bak 's|path="../../../JUCE/modules"|path="C:/Users/runneradmin/juce/modules"|g' ultraDYN.jucer
          fi
          
          echo "Updated .jucer file with JUCE path:"
          grep -A 2 -B 2 "path=" ultraDYN.jucer

      - name: Generate project files (macOS)
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          # Build Projucer first
          echo "Building Projucer..."
          cd "$HOME/juce/extras/Projucer/Builds/MacOSX"
          xcodebuild -project Projucer.xcodeproj -target "Projucer - App" -configuration Release
          
          # Use Projucer to generate project files
          PROJUCER_BIN="$HOME/juce/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
          if [ -x "$PROJUCER_BIN" ]; then
            echo "Running Projucer to generate project files..."
            "$PROJUCER_BIN" --resave "${{ github.workspace }}/ultraDYN.jucer"
          else
            echo "Projucer binary not found, using existing project files"
          fi

      - name: Generate project files (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          # Build Projucer first
          Write-Host "Building Projucer..."
          $juceDir = "C:\Users\runneradmin\juce"
          $projucerSln = Join-Path $juceDir "extras\Projucer\Builds\VisualStudio2022\Projucer.sln"
          
          # Find MSBuild
          $msbuildPath = $null
          $possiblePaths = @(
            "msbuild",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Get-Command $path -ErrorAction SilentlyContinue) {
              $msbuildPath = $path
              break
            }
          }
          
          if ($msbuildPath) {
            & $msbuildPath $projucerSln "/p:Configuration=Release" "/p:Platform=x64" "/verbosity:minimal"
            
            # Use Projucer to generate project files
            $projucerExe = Join-Path $juceDir "extras\Projucer\Builds\VisualStudio2022\x64\Release\App\Projucer.exe"
            if (Test-Path $projucerExe) {
              Write-Host "Running Projucer to generate project files..."
              & $projucerExe --resave ultraDYN.jucer
            } else {
              Write-Host "Projucer.exe not found, using existing project files"
            }
          } else {
            Write-Host "MSBuild not found, using existing project files"
          }

      - name: Setup build environment (macOS)
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          # Create self-signed certificate for code signing
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Create certificate
          openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=UltraDYN Development"
          openssl pkcs12 -export -out certificate.p12 -inkey key.pem -in cert.pem -passout pass:password
          
          # Import certificate
          security import certificate.p12 -k build.keychain -P password -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

      - name: Build project (macOS)
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          echo "Building macOS project..."
          
          # List available targets
          echo "Available targets:"
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -list
          
          # Build VST3 target
          echo "Building VST3..."
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -target "ultraDYN - VST3" -configuration ${{ matrix.config }} -allowProvisioningUpdates
          
          # Build AU target
          echo "Building AU..."
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -target "ultraDYN - AU" -configuration ${{ matrix.config }} -allowProvisioningUpdates

      - name: Build project (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Building Windows project..."
          
          # Find MSBuild
          $msbuildPath = $null
          $possiblePaths = @(
            "msbuild",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Get-Command $path -ErrorAction SilentlyContinue) {
              $msbuildPath = $path
              break
            }
          }
          
          if ($msbuildPath) {
            Write-Host "Using MSBuild at: $msbuildPath"
            & $msbuildPath "Builds\VisualStudio2022\ultraDYN.sln" "/p:Configuration=${{ matrix.config }}" "/p:Platform=x64" "/verbosity:minimal"
          } else {
            Write-Error "MSBuild not found"
            exit 1
          }

      - name: Verify build outputs
        shell: bash
        run: |
          echo "Checking build outputs..."
          if [ "${{ matrix.os }}" = "macOS" ]; then
            echo "macOS build outputs:"
            find build -name "*.vst3" -o -name "*.component" -o -name "*.app" 2>/dev/null || echo "No build outputs found in build directory"
            find Builds/MacOSX -name "*.vst3" -o -name "*.component" -o -name "*.app" 2>/dev/null || echo "No build outputs found in Builds/MacOSX directory"
          elif [ "${{ matrix.os }}" = "Windows" ]; then
            echo "Windows build outputs:"
            find Builds/VisualStudio2022 -name "*.vst3" -o -name "*.exe" 2>/dev/null || echo "No build outputs found"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ultraDYN-${{ matrix.os }}-${{ matrix.config }}-${{ github.sha }}
          path: |
            build/Build/Products/${{ matrix.config }}/*.vst3
            build/Build/Products/${{ matrix.config }}/*.component
            build/Build/Products/${{ matrix.config }}/*.app
            Builds/MacOSX/build/Build/Products/${{ matrix.config }}/*.vst3
            Builds/MacOSX/build/Build/Products/${{ matrix.config }}/*.component
            Builds/MacOSX/build/Build/Products/${{ matrix.config }}/*.app
            Builds/VisualStudio2022/x64/${{ matrix.config }}/VST3/*.vst3
            Builds/VisualStudio2022/x64/${{ matrix.config }}/Standalone/*.exe
          retention-days: 30
