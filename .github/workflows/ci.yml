name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  JUCE_VERSION: '8.0.8'
  PLUGINVAL_VERSION: '1.0.0'

jobs:
  build-and-test:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]
        config: [Debug, Release]
        include:
          - platform: macos-latest
            os: macOS
            arch: universal
          - platform: windows-latest
            os: Windows
            arch: x64

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JUCE
        shell: bash
        run: |
          # Download and setup JUCE framework
          JUCE_DIR="$HOME/juce"
          mkdir -p "$JUCE_DIR"
          cd "$JUCE_DIR"
          
          # Clone JUCE repository
          git clone --depth 1 --branch ${{ env.JUCE_VERSION }} https://github.com/juce-framework/JUCE.git .
          
          # Set JUCE path for the build
          echo "JUCE_DIR=$JUCE_DIR" >> $GITHUB_ENV

      - name: Cache JUCE
        uses: actions/cache@v4
        with:
          path: |
            $HOME/juce
            ${{ github.workspace }}/JuceLibraryCode
          key: juce-${{ env.JUCE_VERSION }}-${{ runner.os }}

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            build/
            Builds/VisualStudio2022/x64/${{ matrix.config }}/
          key: build-${{ runner.os }}-${{ matrix.config }}-${{ hashFiles('**/*.cpp', '**/*.h', '**/*.jucer') }}

      - name: Regenerate project files
        shell: bash
        run: |
          # Regenerate project files from ultraDYN.jucer
          echo "Regenerating project files from ultraDYN.jucer..."
          if [ "${{ matrix.os }}" = "macOS" ]; then
            # Use Projucer to regenerate Xcode project
            $HOME/juce/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer --resave ultraDYN.jucer
          elif [ "${{ matrix.os }}" = "Windows" ]; then
            # Use Projucer to regenerate Visual Studio project
            $HOME/juce/extras/Projucer/Builds/VisualStudio2022/x64/Release/App/Projucer.exe --resave ultraDYN.jucer
          fi

      - name: Setup build environment
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          # Create self-signed certificate for code signing
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Create certificate with proper password handling
          openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=UltraDYN Development"
          openssl pkcs12 -export -out certificate.p12 -inkey key.pem -in cert.pem -passout pass:password
          
          # Import certificate with correct password
          security import certificate.p12 -k build.keychain -P password -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

      - name: Build project
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macOS" ]; then
            # macOS build - use ultraDYN.jucer
            echo "Building macOS project..."
            xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -scheme ultraDYN -configuration ${{ matrix.config }} -derivedDataPath build -allowProvisioningUpdates
          elif [ "${{ matrix.os }}" = "Windows" ]; then
            # Windows build - use ultraDYN.jucer
            echo "Building Windows project..."
            msbuild Builds/VisualStudio2022/ultraDYN.sln /p:Configuration=${{ matrix.config }} /p:Platform=x64 /verbosity:minimal
          fi

      - name: Setup pluginval
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macOS" ]; then
            curl -L -o pluginval.zip "https://github.com/Tracktion/pluginval/releases/download/v${{ env.PLUGINVAL_VERSION }}/pluginval_macOS.zip"
            unzip pluginval.zip
            chmod +x pluginval
          elif [ "${{ matrix.os }}" = "Windows" ]; then
            curl -L -o pluginval.zip "https://github.com/Tracktion/pluginval/releases/download/v${{ env.PLUGINVAL_VERSION }}/pluginval_Windows.zip"
            unzip pluginval.zip
          fi

      - name: Validate plugins
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macOS" ]; then
            echo "Validating macOS plugins..."
            if [ -f "build/Build/Products/${{ matrix.config }}/ultraDYN.vst3" ]; then
              ./pluginval --validate-in-process --timeout-ms 60000 build/Build/Products/${{ matrix.config }}/ultraDYN.vst3
            else
              echo "Warning: VST3 plugin not found"
            fi
            if [ -f "build/Build/Products/${{ matrix.config }}/ultraDYN.component" ]; then
              ./pluginval --validate-in-process --timeout-ms 60000 build/Build/Products/${{ matrix.config }}/ultraDYN.component
            else
              echo "Warning: Audio Unit plugin not found"
            fi
          elif [ "${{ matrix.os }}" = "Windows" ]; then
            echo "Validating Windows plugins..."
            if [ -f "Builds/VisualStudio2022/x64/${{ matrix.config }}/VST3/ultraDYN.vst3" ]; then
              ./pluginval.exe --validate-in-process --timeout-ms 60000 Builds/VisualStudio2022/x64/${{ matrix.config }}/VST3/ultraDYN.vst3
            else
              echo "Warning: VST3 plugin not found"
            fi
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ultraDYN-${{ matrix.os }}-${{ matrix.config }}-${{ github.sha }}
          path: |
            build/Build/Products/${{ matrix.config }}/*.vst3
            build/Build/Products/${{ matrix.config }}/*.component
            build/Build/Products/${{ matrix.config }}/*.app
            Builds/VisualStudio2022/x64/${{ matrix.config }}/VST3/*.vst3
            Builds/VisualStudio2022/x64/${{ matrix.config }}/Standalone/*.exe
          retention-days: 30
