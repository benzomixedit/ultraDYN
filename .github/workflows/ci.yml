name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  JUCE_VERSION: '8.0.8'
  PLUGINVAL_VERSION: '1.0.0'

jobs:
  build-and-test:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]
        config: [Debug, Release]
        include:
          - platform: macos-latest
            os: macOS
            arch: universal
          - platform: windows-latest
            os: Windows
            arch: x64

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JUCE
        shell: bash
        run: |
          # Download and setup JUCE framework
          JUCE_DIR="$HOME/juce"
          mkdir -p "$JUCE_DIR"
          cd "$JUCE_DIR"
          
          # Clone JUCE repository
          git clone --depth 1 --branch ${{ env.JUCE_VERSION }} https://github.com/juce-framework/JUCE.git .
          
          # Set JUCE path for the build
          echo "JUCE_DIR=$JUCE_DIR" >> $GITHUB_ENV

      - name: Cache JUCE
        uses: actions/cache@v4
        with:
          path: |
            $HOME/juce
            ${{ github.workspace }}/JuceLibraryCode
          key: juce-${{ env.JUCE_VERSION }}-${{ runner.os }}

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            build/
            Builds/VisualStudio2022/x64/${{ matrix.config }}/
          key: build-${{ runner.os }}-${{ matrix.config }}-${{ hashFiles('**/*.cpp', '**/*.h', '**/*.jucer') }}

      - name: Setup Visual Studio (Windows)
        if: matrix.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1

      - name: Check project files
        shell: bash
        run: |
          # Check if project files exist and are up to date
          echo "Checking project files..."
          if [ "${{ matrix.os }}" = "macOS" ]; then
            if [ -f "Builds/MacOSX/ultraDYN.xcodeproj/project.pbxproj" ]; then
              echo "Xcode project exists"
            else
              echo "Warning: Xcode project not found"
            fi
          elif [ "${{ matrix.os }}" = "Windows" ]; then
            if [ -f "Builds/VisualStudio2022/ultraDYN.sln" ]; then
              echo "Visual Studio project exists"
            else
              echo "Warning: Visual Studio project not found"
            fi
          fi

      - name: Verify build tools (Windows)
        if: matrix.os == 'Windows'
        shell: bash
        run: |
          echo "Checking available build tools..."
          echo "PATH: $PATH"
          echo "MSBuild location:"
          which msbuild || echo "msbuild not found in PATH"
          echo "Visual Studio installation:"
          ls -la "C:/Program Files/Microsoft Visual Studio/" || echo "Visual Studio not found"
          echo "Build Tools installation:"
          ls -la "C:/Program Files (x86)/Microsoft Visual Studio/" || echo "Build Tools not found"

      - name: Setup build environment
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          # Create self-signed certificate for code signing
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Create certificate with proper password handling
          openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=UltraDYN Development"
          openssl pkcs12 -export -out certificate.p12 -inkey key.pem -in cert.pem -passout pass:password
          
          # Import certificate with correct password
          security import certificate.p12 -k build.keychain -P password -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

      - name: Build project (macOS)
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          # macOS build - use ultraDYN.jucer
          echo "Building macOS project..."
          # List available schemes first
          echo "Available schemes in ultraDYN.xcodeproj:"
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -list
          # Build using the "ultraDYN - All" scheme which builds all targets
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -scheme "ultraDYN - All" -configuration ${{ matrix.config }} -derivedDataPath build -allowProvisioningUpdates

      - name: Regenerate project files (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          # Regenerate project files from ultraDYN.jucer using Projucer
          Write-Host "Regenerating project files from ultraDYN.jucer..."
          
          # Find Projucer
          $projucerPath = $null
          $juceDir = "$env:HOME\juce"
          
          # Check for existing Projucer builds
          $possiblePaths = @(
            "$juceDir\extras\Projucer\Builds\VisualStudio2022\x64\Release\App\Projucer.exe",
            "$juceDir\extras\Projucer\Builds\VisualStudio2022\x64\Debug\App\Projucer.exe",
            "$juceDir\extras\Projucer\Builds\VisualStudio2019\x64\Release\App\Projucer.exe",
            "$juceDir\extras\Projucer\Builds\VisualStudio2019\x64\Debug\App\Projucer.exe",
            "$juceDir\extras\Projucer\Builds\VisualStudio2017\x64\Release\App\Projucer.exe",
            "$juceDir\extras\Projucer\Builds\VisualStudio2017\x64\Debug\App\Projucer.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $projucerPath = $path
              Write-Host "Found existing Projucer at: $projucerPath"
              break
            }
          }
          
          if (-not $projucerPath) {
            Write-Host "Projucer not found, trying to build it first..."
            
            # Look for Projucer project files
            $projucerProjects = @(
              "$juceDir\extras\Projucer\Builds\VisualStudio2022\Projucer.sln",
              "$juceDir\extras\Projucer\Builds\VisualStudio2019\Projucer.sln",
              "$juceDir\extras\Projucer\Builds\VisualStudio2017\Projucer.sln",
              "$juceDir\extras\Projucer\Projucer.sln"
            )
            
            $foundProject = $false
            foreach ($project in $projucerProjects) {
              if (Test-Path $project) {
                Write-Host "Found Projucer project at: $project"
                Write-Host "Building Projucer..."
                & msbuild $project "/p:Configuration=Release" "/p:Platform=x64" "/verbosity:minimal"
                $foundProject = $true
                break
              }
            }
            
            if (-not $foundProject) {
              Write-Host "No Projucer project found, checking directory structure..."
              Write-Host "JUCE directory contents:"
              Get-ChildItem "$juceDir\extras\Projucer" -Recurse -Name | Select-Object -First 20
              
              # Try to find any Projucer executable
              $projucerExe = Get-ChildItem "$juceDir" -Recurse -Name "Projucer.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($projucerExe) {
                $projucerPath = "$juceDir\$projucerExe"
                Write-Host "Found Projucer at: $projucerPath"
              }
            }
          }
          
          if ($projucerPath) {
            Write-Host "Using Projucer at: $projucerPath"
            & $projucerPath --resave "ultraDYN.jucer"
            Write-Host "Project files regenerated successfully"
          } else {
            Write-Host "Warning: Could not find or build Projucer, skipping project regeneration"
            Write-Host "This may cause build failures due to missing JUCE files"
          }

      - name: Build project (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          # Windows build using PowerShell
          Write-Host "Building Windows project..."
          
          # Find MSBuild
          $msbuildPath = $null
          $possiblePaths = @(
            "msbuild",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\MSBuild.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin\MSBuild.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\MSBuild.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Get-Command $path -ErrorAction SilentlyContinue) {
              $msbuildPath = $path
              break
            }
          }
          
          if ($msbuildPath) {
            Write-Host "Using MSBuild at: $msbuildPath"
            & $msbuildPath "Builds\VisualStudio2022\ultraDYN.sln" "/p:Configuration=${{ matrix.config }}" "/p:Platform=x64" "/verbosity:minimal"
          } else {
            Write-Error "MSBuild not found. Please ensure Visual Studio or Build Tools are installed."
            exit 1
          }

      - name: Setup pluginval
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macOS" ]; then
            curl -L -o pluginval.zip "https://github.com/Tracktion/pluginval/releases/download/v${{ env.PLUGINVAL_VERSION }}/pluginval_macOS.zip"
            unzip pluginval.zip
            chmod +x pluginval
          elif [ "${{ matrix.os }}" = "Windows" ]; then
            curl -L -o pluginval.zip "https://github.com/Tracktion/pluginval/releases/download/v${{ env.PLUGINVAL_VERSION }}/pluginval_Windows.zip"
            unzip pluginval.zip
          fi

      - name: Validate plugins
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macOS" ]; then
            echo "Validating macOS plugins..."
            if [ -f "build/Build/Products/${{ matrix.config }}/ultraDYN.vst3" ]; then
              ./pluginval --validate-in-process --timeout-ms 60000 build/Build/Products/${{ matrix.config }}/ultraDYN.vst3
            else
              echo "Warning: VST3 plugin not found"
            fi
            if [ -f "build/Build/Products/${{ matrix.config }}/ultraDYN.component" ]; then
              ./pluginval --validate-in-process --timeout-ms 60000 build/Build/Products/${{ matrix.config }}/ultraDYN.component
            else
              echo "Warning: Audio Unit plugin not found"
            fi
          elif [ "${{ matrix.os }}" = "Windows" ]; then
            echo "Validating Windows plugins..."
            if [ -f "Builds/VisualStudio2022/x64/${{ matrix.config }}/VST3/ultraDYN.vst3" ]; then
              ./pluginval.exe --validate-in-process --timeout-ms 60000 Builds/VisualStudio2022/x64/${{ matrix.config }}/VST3/ultraDYN.vst3
            else
              echo "Warning: VST3 plugin not found"
            fi
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ultraDYN-${{ matrix.os }}-${{ matrix.config }}-${{ github.sha }}
          path: |
            build/Build/Products/${{ matrix.config }}/*.vst3
            build/Build/Products/${{ matrix.config }}/*.component
            build/Build/Products/${{ matrix.config }}/*.app
            Builds/VisualStudio2022/x64/${{ matrix.config }}/VST3/*.vst3
            Builds/VisualStudio2022/x64/${{ matrix.config }}/Standalone/*.exe
          retention-days: 30
