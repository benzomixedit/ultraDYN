name: Release Pipeline

on:
  push:
    tags:
      - 'v*'

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JUCE
        shell: bash
        run: |
          # Setup JUCE in the expected location
          JUCE_DIR="$HOME/JUCE"
          mkdir -p "$JUCE_DIR"
          cd "$JUCE_DIR"
          
          # Clone JUCE repository
          git clone --depth 1 --branch 8.0.8 https://github.com/juce-framework/JUCE.git .
          
          # Set JUCE path for the build
          echo "JUCE_DIR=$JUCE_DIR" >> $GITHUB_ENV
          
          # Verify JUCE setup
          echo "JUCE directory contents:"
          ls -la
          echo "JUCE modules directory contents:"
          ls -la modules/ || echo "modules directory not found"

      - name: Build Projucer
        shell: bash
        run: |
          echo "Building Projucer..."
          JUCE_DIR="$HOME/JUCE"
          cd "$JUCE_DIR/extras/Projucer/Builds/MacOSX"
          xcodebuild -project Projucer.xcodeproj -target "Projucer - App" -configuration Release
          echo "Projucer build completed"

      - name: Generate project files
        shell: bash
        run: |
          echo "Generating project files with Projucer..."
          JUCE_DIR="$HOME/JUCE"
          PROJUCER_BIN="$JUCE_DIR/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
          
          if [ -x "$PROJUCER_BIN" ]; then
            echo "Running Projucer to generate project files..."
            "$PROJUCER_BIN" --resave "${{ github.workspace }}/ultraDYN.jucer"
            echo "Project files generated"
          else
            echo "Projucer binary not found, using existing project files"
          fi

      - name: Disable plugin copy steps for CI
        shell: bash
        run: |
          echo "Disabling plugin copy steps in project.pbxproj for CI build..."
          
          PROJECT_FILE="Builds/MacOSX/ultraDYN.xcodeproj/project.pbxproj"
          
          if [ -f "$PROJECT_FILE" ]; then
            echo "Modifying $PROJECT_FILE to disable plugin copy steps..."
            
            # Create a backup
            cp "$PROJECT_FILE" "${PROJECT_FILE}.backup"
            
            # Replace the entire shellScript content for each specific plugin copy phase
            # Target the VST3 plugin copy step (A9A4B81C16FC3B13711B60B3)
            sed -i '' '/A9A4B81C16FC3B13711B60B3/,/shellScript = ".*"/{/shellScript = "/{s/shellScript = ".*"/shellScript = "echo \"VST3 plugin copy disabled for CI\"; exit 0;"/;}}' "$PROJECT_FILE"
            
            # Target the AAX plugin copy step (D956495E04E77727E3BC1B8B)
            sed -i '' '/D956495E04E77727E3BC1B8B/,/shellScript = ".*"/{/shellScript = "/{s/shellScript = ".*"/shellScript = "echo \"AAX plugin copy disabled for CI\"; exit 0;"/;}}' "$PROJECT_FILE"
            
            # Target the AU plugin copy step (EA49570E07BD518D7ED8DDD3)
            sed -i '' '/EA49570E07BD518D7ED8DDD3/,/shellScript = ".*"/{/shellScript = "/{s/shellScript = ".*"/shellScript = "echo \"AU plugin copy disabled for CI\"; exit 0;"/;}}' "$PROJECT_FILE"
            
            echo "Plugin copy steps disabled successfully"
          else
            echo "Warning: Project file not found at $PROJECT_FILE"
          fi

      - name: Setup build environment
        shell: bash
        run: |
          # Create self-signed certificate for code signing
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Create certificate
          openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=UltraDYN Development"
          openssl pkcs12 -export -out certificate.p12 -inkey key.pem -in cert.pem -passout pass:password
          
          # Import certificate
          security import certificate.p12 -k build.keychain -P password -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

      - name: Build Universal Binaries
        shell: bash
        run: |
          echo "Building universal binaries (ARM64 + x86_64)..."
          
          # Build for ARM64 (without clean to avoid permission issues)
          echo "Building ARM64 version..."
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -scheme "ultraDYN - All" -configuration Release -arch arm64 -derivedDataPath build-arm64 build
          
          # Build for x86_64 (without clean to avoid permission issues)
          echo "Building x86_64 version..."
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -scheme "ultraDYN - All" -configuration Release -arch x86_64 -derivedDataPath build-x86_64 build
          
          # Create universal binary by combining both architectures
          echo "Creating universal binary..."
          mkdir -p build-universal
          
          # Copy ARM64 version as base
          cp -r build-arm64/Build/Products/Release/ultraDYN.vst3 build-universal/
          cp -r build-arm64/Build/Products/Release/ultraDYN.component build-universal/
          cp -r build-arm64/Build/Products/Release/ultraDYN.app build-universal/
          
          # Combine architectures using lipo
          lipo -create \
            build-arm64/Build/Products/Release/ultraDYN.vst3/Contents/MacOS/ultraDYN \
            build-x86_64/Build/Products/Release/ultraDYN.vst3/Contents/MacOS/ultraDYN \
            -output build-universal/ultraDYN.vst3/Contents/MacOS/ultraDYN
          
          lipo -create \
            build-arm64/Build/Products/Release/ultraDYN.component/Contents/MacOS/ultraDYN \
            build-x86_64/Build/Products/Release/ultraDYN.component/Contents/MacOS/ultraDYN \
            -output build-universal/ultraDYN.component/Contents/MacOS/ultraDYN
          
          lipo -create \
            build-arm64/Build/Products/Release/ultraDYN.app/Contents/MacOS/ultraDYN \
            build-x86_64/Build/Products/Release/ultraDYN.app/Contents/MacOS/ultraDYN \
            -output build-universal/ultraDYN.app/Contents/MacOS/ultraDYN
          
          # Verify universal binaries
          echo "Verifying universal binaries..."
          file build-universal/ultraDYN.vst3/Contents/MacOS/ultraDYN
          file build-universal/ultraDYN.component/Contents/MacOS/ultraDYN
          file build-universal/ultraDYN.app/Contents/MacOS/ultraDYN
          
          # Copy universal binaries to the expected build location
          mkdir -p Builds/MacOSX/build/Release/
          cp -r build-universal/* Builds/MacOSX/build/Release/
          
          echo "Universal binary build completed!"

      - name: Create DMG
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Creating DMG for version $VERSION"
          
          # Install create-dmg
          brew install create-dmg
          
          # Copy README to build directory
          cp README_DMG.md "Builds/MacOSX/build/Release/README.txt"
          
          # Create DMG without icon file (since it doesn't exist)
          create-dmg \
            --volname "UltraDYN $VERSION" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "ultraDYN.app" 175 120 \
            --hide-extension "ultraDYN.app" \
            --app-drop-link 425 120 \
            "ultraDYN-$VERSION-macOS.dmg" \
            "Builds/MacOSX/build/Release/"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ultraDYN-macOS-${{ github.ref_name }}
          path: |
            build/Build/Products/Release/*.vst3
            build/Build/Products/Release/*.component
            build/Build/Products/Release/*.app
            ultraDYN-*-macOS.dmg

  build-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JUCE
        shell: pwsh
        run: |
          # Setup JUCE in the expected location
          $juceDir = "$env:USERPROFILE\JUCE"
          New-Item -ItemType Directory -Force -Path $juceDir
          Set-Location $juceDir
          
          # Clone JUCE repository
          git clone --depth 1 --branch 8.0.8 https://github.com/juce-framework/JUCE.git .
          
          # Set JUCE path for the build
          echo "JUCE_DIR=$juceDir" >> $env:GITHUB_ENV
          
          # Verify JUCE setup
          Write-Host "JUCE directory contents:"
          Get-ChildItem
          Write-Host "JUCE modules directory contents:"
          Get-ChildItem modules -ErrorAction SilentlyContinue

      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v1.1

      - name: Build Projucer
        shell: pwsh
        run: |
          Write-Host "Building Projucer..."
          $juceDir = "$env:USERPROFILE\JUCE"
          $projucerSln = Join-Path $juceDir "extras\Projucer\Builds\VisualStudio2022\Projucer.sln"
          
          # Find MSBuild
          $msbuildPath = $null
          $possiblePaths = @(
            "msbuild",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Get-Command $path -ErrorAction SilentlyContinue) {
              $msbuildPath = $path
              break
            }
          }
          
          if ($msbuildPath) {
            Write-Host "Using MSBuild at: $msbuildPath"
            & $msbuildPath $projucerSln "/p:Configuration=Release" "/p:Platform=x64" "/verbosity:minimal"
            Write-Host "Projucer build completed"
          } else {
            Write-Error "MSBuild not found"
            exit 1
          }

      - name: Generate project files
        shell: pwsh
        run: |
          Write-Host "Generating project files with Projucer..."
          $juceDir = "$env:USERPROFILE\JUCE"
          $projucerExe = Join-Path $juceDir "extras\Projucer\Builds\VisualStudio2022\x64\Release\App\Projucer.exe"
          
          if (Test-Path $projucerExe) {
            Write-Host "Running Projucer to generate project files..."
            & $projucerExe --resave ultraDYN.jucer
            Write-Host "Project files generated"
          } else {
            Write-Host "Projucer.exe not found, using existing project files"
          }

      - name: Fix project paths
        shell: pwsh
        run: |
          Write-Host "Fixing project paths for Windows..."
          
          # Set environment variable for JUCE path
          $juceDir = "$env:USERPROFILE\JUCE"
          $env:JUCE_PATH = $juceDir
          
          # Update Visual Studio project to use the correct JUCE path
          $content = Get-Content "Builds\VisualStudio2022\ultraDYN.vcxproj" -Raw
          $content = $content -replace '\$\(JUCE_PATH\)', $juceDir
          Set-Content "Builds\VisualStudio2022\ultraDYN.vcxproj" $content -NoNewline
          
          Write-Host "Updated Visual Studio project paths"

      - name: Fix missing include file
        shell: pwsh
        run: |
          Write-Host "Fixing missing include_juce_audio_plugin_client.cpp file..."
          
          # Remove the problematic include from the project file
          $content = Get-Content "Builds\VisualStudio2022\ultraDYN.vcxproj" -Raw
          $content = $content -replace '<ClCompile Include="\.\.\\\.\.\\JuceLibraryCode\\include_juce_audio_plugin_client\.cpp" />', ''
          Set-Content "Builds\VisualStudio2022\ultraDYN.vcxproj" $content -NoNewline
          
          Write-Host "Removed missing include file from project"

      - name: Fix Harfbuzz and Sheenbidi includes
        shell: pwsh
        run: |
          Write-Host "Fixing Harfbuzz and Sheenbidi includes..."
          
          # Fix Harfbuzz include
          $harfbuzzContent = Get-Content "JuceLibraryCode\include_juce_graphics_Harfbuzz.cpp" -Raw
          $harfbuzzContent = $harfbuzzContent -replace '#include <juce_graphics/juce_graphics_Harfbuzz\.cpp>', '#include "juce_graphics_Harfbuzz.cpp"'
          Set-Content "JuceLibraryCode\include_juce_graphics_Harfbuzz.cpp" $harfbuzzContent -NoNewline
          
          # Fix Sheenbidi include
          $sheenbidiContent = Get-Content "JuceLibraryCode\include_juce_graphics_Sheenbidi.c" -Raw
          $sheenbidiContent = $sheenbidiContent -replace '#include <juce_graphics/juce_graphics_Sheenbidi\.c>', '#include "juce_graphics_Sheenbidi.c"'
          Set-Content "JuceLibraryCode\include_juce_graphics_Sheenbidi.c" $sheenbidiContent -NoNewline
          
          Write-Host "Fixed Harfbuzz and Sheenbidi includes"

      - name: Add Harfbuzz and Sheenbidi to project
        shell: pwsh
        run: |
          Write-Host "Adding Harfbuzz and Sheenbidi files to project..."
          
          # Read the project file
          $content = Get-Content "Builds\VisualStudio2022\ultraDYN.vcxproj" -Raw
          
          # Add Harfbuzz and Sheenbidi includes to the project
          $harfbuzzInclude = '    <ClCompile Include="..\..\JuceLibraryCode\include_juce_graphics_Harfbuzz.cpp" />'
          $sheenbidiInclude = '    <ClCompile Include="..\..\JuceLibraryCode\include_juce_graphics_Sheenbidi.c" />'
          $compilationTimeInclude = '    <ClCompile Include="..\..\JuceLibraryCode\include_juce_core_CompilationTime.cpp" />'
          
          # Insert after the last include_juce file
          $content = $content -replace '(<ClCompile Include="\.\.\\\.\.\\JuceLibraryCode\\include_juce_gui_extra\.cpp" />)', "`$1`n$harfbuzzInclude`n$sheenbidiInclude`n$compilationTimeInclude"
          
          Set-Content "Builds\VisualStudio2022\ultraDYN.vcxproj" $content -NoNewline
          
          Write-Host "Added Harfbuzz, Sheenbidi, and compilation time files to project"

      - name: Build VST3
        shell: pwsh
        run: |
          Write-Host "Building VST3 plugin..."
          
          # Set JUCE path environment variable
          $juceDir = "$env:USERPROFILE\JUCE"
          $env:JUCE_PATH = $juceDir
          
          # Find MSBuild
          $msbuildPath = $null
          $possiblePaths = @(
            "msbuild",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Get-Command $path -ErrorAction SilentlyContinue) {
              $msbuildPath = $path
              break
            }
          }
          
          if ($msbuildPath) {
            Write-Host "Using MSBuild at: $msbuildPath"
            & $msbuildPath "Builds\VisualStudio2022\ultraDYN.sln" "/p:Configuration=Release" "/p:Platform=x64" "/verbosity:minimal"
          } else {
            Write-Error "MSBuild not found"
            exit 1
          }

      - name: Build Standalone
        shell: pwsh
        run: |
          Write-Host "Building Standalone app..."
          
          # Set JUCE path environment variable
          $juceDir = "$env:USERPROFILE\JUCE"
          $env:JUCE_PATH = $juceDir
          
          # Find MSBuild
          $msbuildPath = $null
          $possiblePaths = @(
            "msbuild",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Get-Command $path -ErrorAction SilentlyContinue) {
              $msbuildPath = $path
              break
            }
          }
          
          if ($msbuildPath) {
            Write-Host "Using MSBuild at: $msbuildPath"
            & $msbuildPath "Builds\VisualStudio2022\ultraDYN.sln" "/p:Configuration=Release" "/p:Platform=x64" "/verbosity:minimal"
          } else {
            Write-Error "MSBuild not found"
            exit 1
          }

      - name: Create Windows Package
        shell: pwsh
        run: |
          $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
          Write-Host "Creating Windows package for version $VERSION"
          
          # Create a simple zip package
          New-Item -ItemType Directory -Force -Path "ultraDYN-$VERSION-Windows"
          
          # Copy VST3 plugin
          if (Test-Path "Builds\VisualStudio2022\x64\Release\VST3\ultraDYN.vst3") {
            Copy-Item -Recurse "Builds\VisualStudio2022\x64\Release\VST3\ultraDYN.vst3" "ultraDYN-$VERSION-Windows\"
            Write-Host "Copied VST3 plugin"
          } else {
            Write-Host "Warning: VST3 plugin not found"
          }
          
          # Copy standalone app
          if (Test-Path "Builds\VisualStudio2022\x64\Release\Standalone\ultraDYN.exe") {
            Copy-Item "Builds\VisualStudio2022\x64\Release\Standalone\ultraDYN.exe" "ultraDYN-$VERSION-Windows\"
            Write-Host "Copied standalone app"
          } else {
            Write-Host "Warning: Standalone app not found"
          }
          
          # Create zip file
          Compress-Archive -Path "ultraDYN-$VERSION-Windows" -DestinationPath "ultraDYN-$VERSION-Windows.zip"
          Write-Host "Created Windows package: ultraDYN-$VERSION-Windows.zip"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ultraDYN-Windows-${{ github.ref_name }}
          path: |
            Builds/VisualStudio2022/x64/Release/*.dll
            Builds/VisualStudio2022/x64/Release/*.exe
            ultraDYN-*-Windows.zip

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/ultraDYN-macOS-*/**/*.vst3
            artifacts/ultraDYN-macOS-*/**/*.component
            artifacts/ultraDYN-macOS-*/**/*.app
            artifacts/ultraDYN-macOS-*/**/*.dmg
            artifacts/ultraDYN-Windows-*/**/*.dll
            artifacts/ultraDYN-Windows-*/**/*.exe
            artifacts/ultraDYN-Windows-*/**/*.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
