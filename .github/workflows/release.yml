name: Release Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  JUCE_VERSION: '8.0.8'

jobs:
  build-and-release:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]
        include:
          - platform: macos-latest
            os: macOS
            arch: universal
          - platform: windows-latest
            os: Windows
            arch: x64

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JUCE (macOS)
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          # Setup JUCE in the expected location for macOS
          JUCE_DIR="$HOME/JUCE"
          mkdir -p "$JUCE_DIR"
          cd "$JUCE_DIR"
          
          # Clone JUCE repository
          git clone --depth 1 --branch ${{ env.JUCE_VERSION }} https://github.com/juce-framework/JUCE.git .
          
          # Set JUCE path for the build
          echo "JUCE_DIR=$JUCE_DIR" >> $GITHUB_ENV
          
          # Verify JUCE setup
          echo "JUCE directory contents:"
          ls -la
          echo "JUCE modules directory contents:"
          ls -la modules/ || echo "modules directory not found"

      - name: Setup JUCE (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          # Setup JUCE in the expected location for Windows
          $juceDir = "$env:USERPROFILE\JUCE"
          New-Item -ItemType Directory -Force -Path $juceDir
          Set-Location $juceDir
          
          # Clone JUCE repository
          git clone --depth 1 --branch $env:JUCE_VERSION https://github.com/juce-framework/JUCE.git .
          
          # Set JUCE path for the build
          echo "JUCE_DIR=$juceDir" >> $env:GITHUB_ENV
          
          # Verify JUCE setup
          Write-Host "JUCE directory contents:"
          Get-ChildItem
          Write-Host "JUCE modules directory contents:"
          Get-ChildItem modules -ErrorAction SilentlyContinue

      - name: Setup Visual Studio (Windows)
        if: matrix.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1

      - name: Build Projucer (macOS)
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          echo "Building Projucer on macOS..."
          JUCE_DIR="$HOME/JUCE"
          cd "$JUCE_DIR/extras/Projucer/Builds/MacOSX"
          xcodebuild -project Projucer.xcodeproj -target "Projucer - App" -configuration Release
          echo "Projucer build completed"

      - name: Build Projucer (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Building Projucer on Windows..."
          $juceDir = "$env:USERPROFILE\JUCE"
          $projucerSln = Join-Path $juceDir "extras\Projucer\Builds\VisualStudio2022\Projucer.sln"
          
          # Find MSBuild
          $msbuildPath = $null
          $possiblePaths = @(
            "msbuild",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Get-Command $path -ErrorAction SilentlyContinue) {
              $msbuildPath = $path
              break
            }
          }
          
          if ($msbuildPath) {
            Write-Host "Using MSBuild at: $msbuildPath"
            & $msbuildPath $projucerSln "/p:Configuration=Release" "/p:Platform=x64" "/verbosity:minimal"
            Write-Host "Projucer build completed"
          } else {
            Write-Error "MSBuild not found"
            exit 1
          }

      - name: Regenerate project files (macOS)
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          echo "Regenerating project files with Projucer..."
          JUCE_DIR="$HOME/JUCE"
          PROJUCER_BIN="$JUCE_DIR/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
          
          if [ -x "$PROJUCER_BIN" ]; then
            echo "Running Projucer to regenerate project files..."
            "$PROJUCER_BIN" --resave "${{ github.workspace }}/ultraDYN.jucer"
            echo "Project files regenerated"
          else
            echo "Projucer binary not found at $PROJUCER_BIN"
            exit 1
          fi

      - name: Regenerate project files (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Regenerating project files with Projucer..."
          $juceDir = "$env:USERPROFILE\JUCE"
          $projucerExe = Join-Path $juceDir "extras\Projucer\Builds\VisualStudio2022\x64\Release\App\Projucer.exe"
          
          if (Test-Path $projucerExe) {
            Write-Host "Running Projucer to regenerate project files..."
            & $projucerExe --resave ultraDYN.jucer
            Write-Host "Project files regenerated"
          } else {
            Write-Error "Projucer.exe not found at $projucerExe"
            exit 1
          }

      - name: Setup build environment (macOS)
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          # Create self-signed certificate for code signing
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Create certificate
          openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=UltraDYN Development"
          openssl pkcs12 -export -out certificate.p12 -inkey key.pem -in cert.pem -passout pass:password
          
          # Import certificate
          security import certificate.p12 -k build.keychain -P password -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

      - name: Build project (macOS)
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          echo "Building macOS project..."
          
          # List available targets
          echo "Available targets:"
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -list
          
          # Build VST3 target
          echo "Building VST3..."
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -target "ultraDYN - VST3" -configuration Release -allowProvisioningUpdates
          
          # Build AU target
          echo "Building AU..."
          xcodebuild -project Builds/MacOSX/ultraDYN.xcodeproj -target "ultraDYN - AU" -configuration Release -allowProvisioningUpdates

      - name: Build project (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Building Windows project..."
          
          # Find MSBuild
          $msbuildPath = $null
          $possiblePaths = @(
            "msbuild",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Get-Command $path -ErrorAction SilentlyContinue) {
              $msbuildPath = $path
              break
            }
          }
          
          if ($msbuildPath) {
            Write-Host "Using MSBuild at: $msbuildPath"
            & $msbuildPath "Builds\VisualStudio2022\ultraDYN.sln" "/p:Configuration=Release" "/p:Platform=x64" "/verbosity:minimal"
          } else {
            Write-Error "MSBuild not found"
            exit 1
          }

      - name: Create macOS package
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Creating macOS package for version $VERSION"
          
          # Create a simple zip package
          mkdir -p "ultraDYN-$VERSION-macOS"
          
          # Copy VST3 plugin
          if [ -d "build/Build/Products/Release/ultraDYN.vst3" ]; then
            cp -r "build/Build/Products/Release/ultraDYN.vst3" "ultraDYN-$VERSION-macOS/"
            echo "Copied VST3 from build/Build/Products/Release/"
          elif [ -d "Builds/MacOSX/build/Build/Products/Release/ultraDYN.vst3" ]; then
            cp -r "Builds/MacOSX/build/Build/Products/Release/ultraDYN.vst3" "ultraDYN-$VERSION-macOS/"
            echo "Copied VST3 from Builds/MacOSX/build/Build/Products/Release/"
          else
            echo "Warning: VST3 plugin not found"
          fi
          
          # Copy AU plugin
          if [ -d "build/Build/Products/Release/ultraDYN.component" ]; then
            cp -r "build/Build/Products/Release/ultraDYN.component" "ultraDYN-$VERSION-macOS/"
            echo "Copied AU from build/Build/Products/Release/"
          elif [ -d "Builds/MacOSX/build/Build/Products/Release/ultraDYN.component" ]; then
            cp -r "Builds/MacOSX/build/Build/Products/Release/ultraDYN.component" "ultraDYN-$VERSION-macOS/"
            echo "Copied AU from Builds/MacOSX/build/Build/Products/Release/"
          else
            echo "Warning: AU plugin not found"
          fi
          
          # Create zip file
          zip -r "ultraDYN-$VERSION-macOS.zip" "ultraDYN-$VERSION-macOS/"
          echo "Created macOS package: ultraDYN-$VERSION-macOS.zip"

      - name: Create Windows package
        if: matrix.os == 'Windows'
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Creating Windows package for version $VERSION"
          
          # Create a simple zip package
          mkdir -p "ultraDYN-$VERSION-Windows"
          
          # Copy VST3 plugin
          if [ -d "Builds/VisualStudio2022/x64/Release/VST3/ultraDYN.vst3" ]; then
            cp -r "Builds/VisualStudio2022/x64/Release/VST3/ultraDYN.vst3" "ultraDYN-$VERSION-Windows/"
            echo "Copied VST3 plugin"
          else
            echo "Warning: VST3 plugin not found"
          fi
          
          # Copy standalone app
          if [ -f "Builds/VisualStudio2022/x64/Release/Standalone/ultraDYN.exe" ]; then
            cp "Builds/VisualStudio2022/x64/Release/Standalone/ultraDYN.exe" "ultraDYN-$VERSION-Windows/"
            echo "Copied standalone app"
          else
            echo "Warning: Standalone app not found"
          fi
          
          # Create zip file
          zip -r "ultraDYN-$VERSION-Windows.zip" "ultraDYN-$VERSION-Windows/"
          echo "Created Windows package: ultraDYN-$VERSION-Windows.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ultraDYN-${{ matrix.os }}-${{ github.ref_name }}
          path: |
            build/Build/Products/Release/*.vst3
            build/Build/Products/Release/*.component
            build/Build/Products/Release/*.app
            Builds/MacOSX/build/Build/Products/Release/*.vst3
            Builds/MacOSX/build/Build/Products/Release/*.component
            Builds/MacOSX/build/Build/Products/Release/*.app
            Builds/VisualStudio2022/x64/Release/VST3/*.vst3
            Builds/VisualStudio2022/x64/Release/Standalone/*.exe
            ultraDYN-*-macOS.zip
            ultraDYN-*-Windows.zip

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.vst3
            artifacts/**/*.component
            artifacts/**/*.app
            artifacts/**/*.exe
            artifacts/**/*.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
